///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Data.OracleClient;
using System.Drawing;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

//using Asseco.Ranorex.Common;
//using Asseco.Ranorex.Core;
using Asseco.CSharp.Core;

namespace Asseco.CSharp.Sample.Tests
{
    public partial class Recording1
    {
    	
    	//public static Asseco_CSharp_Sample_TestsRepository repo = Asseco_CSharp_Sample_TestsRepository.Instance;
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void TestValidateStatus()
        {
        	Report.Log(ReportLevel.Info, "Hello world");
        	//repo.FrmMain.TFirstName.TextValue = "Jan";
        	repo.FrmMain.TFirstName.PressKeys("Jan");
        	repo.FrmMain.TLastName.PressKeys("Kowalski");
        	repo.FrmMain.ButtonBOk.Click();
        	if(repo.FrmMain.TStatus.TextValue == "Dane zostały zapisane.")         										
        		Report.Log(ReportLevel.Info, "OK");
        	else Report.Log(ReportLevel.Error, String.Format("Błędny komunikat:{0}", repo.FrmMain.TStatus.TextValue));
        	
        	//DbLogger.Log(1, DateTime.Now, "Hello Ranorex", EventType.Info);
        	//Class1.Log();
        }

        public void TestValidateFirstName()
        {
        	Clear();
        	repo.FrmMain.TFirstName.PressKeys("Jan");
        	repo.FrmMain.ButtonBOk.Click();
//        	if(repo.FrmMain.TStatus.TextValue == "Brak danych")         										
//        		Report.Log(ReportLevel.Info, "OK");
//        	else Report.Log(ReportLevel.Error, String.Format("Błąd walidacji formularza:{0}", repo.FrmMain.TStatus.TextValue));
        	Validate.Attribute(repo.FrmMain.TStatusInfo, "Text", "Brak danych");
         }
        
        
        private void Clear() 
        {
            repo.FrmMain.TFirstName.TextValue = string.Empty;
        	repo.FrmMain.TLastName.TextValue = string.Empty;	        	
        }
        
        
        public void TestValidateLastName()
        {
        	Clear();
        	repo.FrmMain.TLastName.PressKeys("Kowalski");
        	repo.FrmMain.ButtonBOk.Click();
//        	if(repo.FrmMain.TStatus.TextValue == "Brak danych")         										
//        		Report.Log(ReportLevel.Info, "OK");
//        	else Report.Log(ReportLevel.Error, String.Format("Błąd walidacji formularza:{0}", repo.FrmMain.TStatus.TextValue));
        	Validate.Attribute(repo.FrmMain.TStatusInfo, "Text", "Brak danych");
        }

        public void DbLoggerTest()
        {
        	DbLogger.Log(1, System.DateTime.Now, "Hello Db Logger!", EventType.Info);
        }

        public void ValidatePeriod()
        {
        	Clear();
        	repo.FrmMain.DBeginDate.PressKeys("20170501");
        	
        }

        public void CalculationTest()
        {
        	repo.FrmMain.BCalculator.Click("37;11");
        	Delay.Milliseconds(200);
        	
        	repo.FrmCalculator.TConsumtion.PressKeys("100");
        	Delay.Milliseconds(200);
        	
        	repo.FrmCalculator.TRate.PressKeys("0,1");
        	Delay.Milliseconds(200);
        	
        	repo.FrmCalculator.BCalculate.Click();
        	Delay.Milliseconds(1000);
        	
        	Validate.Attribute(repo.FrmCalculator.TResult, "Text", "10,00");
        }
        
        private void OpenFileTest()
        {
            repo.FrmMain.BCalculator.Click("37;11");
        	Delay.Milliseconds(200);
        	
        	string fileName = @"C:\Users\Slawomir.Marlewski\source\repos\Asseco.CSharp\Asseco.CSharp.Files\calculationsData.txt";
         	StreamReader reader = File.OpenText(fileName);

            while (!reader.EndOfStream)
            {
                string line = reader.ReadLine();
                string[] words = line.Split(';');
                if (words.Length == 3)
                {
                    string consumption = words[0];
                    string rate = words[1];
                    string result = words[2];
					
                    CalculateTest(consumption, rate, result);
        			
        			ClearFrmCalculator();
                }
                                
            }

        }
        
        private void CalculateTest(string consumption, string rate, string result)
        {
        			repo.FrmCalculator.TConsumtion.PressKeys(consumption);
        			Delay.Milliseconds(200);
        	
        			repo.FrmCalculator.TRate.PressKeys(rate);
        			Delay.Milliseconds(200);
        	
        			repo.FrmCalculator.BCalculate.Click();
        			Delay.Milliseconds(1000);
        	
        			Validate.Attribute(repo.FrmCalculator.TResult, "Text", result);
        }
        
        private void ClearFrmCalculator()
            {
            	repo.FrmCalculator.TRate.TextValue = string.Empty;
        		repo.FrmCalculator.TConsumtion.TextValue = string.Empty;	     
        		repo.FrmCalculator.TResult.TextValue = string.Empty;
            }

        public void TestEnableCalculateButton()
        {
        	ClearFrmCalculator();
        	Validate.Attribute(repo.FrmCalculator.BCalculate, "Enabled", false);
        	
        	ClearFrmCalculator();
        	repo.FrmCalculator.TConsumtion.PressKeys("100");
        	Validate.Attribute(repo.FrmCalculator.BCalculate, "Enabled", false);
        	Delay.Milliseconds(200);
        	
        	ClearFrmCalculator();
        	repo.FrmCalculator.TRate.PressKeys("100");
        	Validate.Attribute(repo.FrmCalculator.BCalculate, "Enabled", false);
        	Delay.Milliseconds(200);
        	
        	ClearFrmCalculator();
        	repo.FrmCalculator.TConsumtion.PressKeys("100");
        	repo.FrmCalculator.TRate.PressKeys("100");
        	Validate.Attribute(repo.FrmCalculator.BCalculate, "Enabled", true);
        	Delay.Milliseconds(200);
        	
        }

        public void WordsTest()
        {
        	ClearFrmCalculator();
        	repo.FrmCalculator.TConsumtion.PressKeys("blablabla");
        	Validate.Attribute(repo.FrmCalculator.BCalculate, "Enabled", false);
        	
        	
        	ClearFrmCalculator();
        	repo.FrmCalculator.TRate.PressKeys("vubububububu");
        	Validate.Attribute(repo.FrmCalculator.BCalculate, "Enabled", false);
        	
        	
        	ClearFrmCalculator();
        	repo.FrmCalculator.TConsumtion.PressKeys("blablabla");
        	repo.FrmCalculator.TRate.PressKeys("vubububu");
        	Validate.Attribute(repo.FrmCalculator.BCalculate, "Enabled", false);
        	
        	ClearFrmCalculator();
        	repo.FrmCalculator.TConsumtion.PressKeys("10.1");
        	repo.FrmCalculator.TRate.PressKeys("23.5");
        	Validate.Attribute(repo.FrmCalculator.BCalculate, "Enabled", false);
        	
        	ClearFrmCalculator();
        	repo.FrmCalculator.TConsumtion.PressKeys("1000000");
        	repo.FrmCalculator.TRate.PressKeys("1000000");
        	Validate.Attribute(repo.FrmCalculator.BCalculate, "Enabled", true);
        }

        public void TestDb()
        {        	      
        	string connectionString = "Data Source=BIGENEA;User Id=BIGENEA2;Password=BIGENEA2; Integrated Security = no;";
            OracleConnection connection = new OracleConnection(connectionString);
            try
            {
            	connection.Open();

            	string sql = "Select consumption, rate, expected from tst_calculationData";
            	OracleCommand command = new OracleCommand(sql, connection);
	            OracleDataReader reader = command.ExecuteReader();
	
				ClearFrmCalculator();
				
	            while (reader.Read())
	            {
	            	string consumption = reader.GetString(0);
	                string rate = reader.GetString(1);
	                string result = reader.GetString(2);
	
					CalculateTest(consumption, rate, result);
	        			
	        		ClearFrmCalculator();
	            }
            }
            catch (OracleException e)
            {
            	Report.Log(ReportLevel.Error, String.Format("Wystąpił błąd bazy danych: {0}", e.Message));
            	Validate.Fail(String.Format("Wystąpił błąd bazy danych: {0}", e.Message));
            }
            catch (Exception e)
            {
            	Report.Log(ReportLevel.Error, String.Format("Wystąpił błąd: {0}", e.Message));
            	Validate.Fail(String.Format("Wystąpił błąd: {0}", e.Message));
            }
            finally
            {
                connection.Close();
            }
        }
        
        
    }
}